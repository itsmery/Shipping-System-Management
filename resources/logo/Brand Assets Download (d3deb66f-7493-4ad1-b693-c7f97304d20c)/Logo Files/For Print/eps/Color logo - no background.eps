%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2370 984
%%HiResBoundingBox: 0 0 2370 983.03998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2370 983.03998 re
W
q
[0.24 0 0 -0.24 0 983.03998] cm
q
0 0 9875 4093.75 re
W*
q
[52.416523 0 0 52.436913 145.580368 595.30524] cm
/DeviceRGB {} CS
[0.0667 0.5647 0.7961] SC
/DeviceRGB {} cs
[0.0667 0.5647 0.7961] sc
21.382999 26.224001 m
21.350363 26.247011 21.319029 26.271677 21.289 26.298 c
21.25779 26.33338 21.229122 26.370714 21.202997 26.41 c
21.177656 26.439487 21.154324 26.470488 21.132999 26.503 c
21.109484 26.549191 21.089483 26.596857 21.073 26.646 c
21.058695 26.67701 21.046028 26.708675 21.034998 26.740997 c
21.011581 26.825745 20.999916 26.912079 21 27.000002 c
21 37 l
21.000017 37.086277 21.011015 37.171131 21.032993 37.254562 c
21.054974 37.337994 21.08721 37.417252 21.129704 37.492336 c
21.172197 37.567425 21.223549 37.635864 21.283758 37.697659 c
21.343964 37.759453 21.411045 37.812565 21.485003 37.856998 c
31.485001 43.856998 l
31.496 43.862 l
31.507 43.869999 l
31.559626 43.897331 31.614292 43.919662 31.671 43.937 c
31.694 43.945 31.716 43.958 31.74 43.965 c
31.913334 44.012535 32.086666 44.012535 32.259998 43.964996 c
32.283997 43.958 32.306 43.945 32.328999 43.937 c
32.385708 43.919666 32.440376 43.897335 32.493 43.870003 c
32.504002 43.862 l
32.515003 43.856998 l
42.515003 37.856998 l
42.588974 37.812534 42.656071 37.759392 42.716286 37.697575 c
42.776501 37.635757 42.827854 37.567295 42.870346 37.492195 c
42.912842 37.417091 42.945076 37.337822 42.967045 37.254383 c
42.989017 37.170944 43.000004 37.086086 43 36.999809 c
43 27 l
43.000019 26.91176 42.988354 26.825092 42.965004 26.739998 c
42.954559 26.709223 42.942226 26.679224 42.928001 26.650002 c
42.911366 26.599466 42.891033 26.550465 42.867001 26.503 c
42.845768 26.471008 42.822769 26.440342 42.798 26.411001 c
42.771858 26.371138 42.742859 26.333471 42.711002 26.298 c
42.681316 26.271685 42.650318 26.247017 42.618004 26.223999 c
42.586185 26.195127 42.552853 26.168129 42.518002 26.143003 c
32.518002 20.143002 l
32.440235 20.096279 32.357639 20.060797 32.270218 20.036554 c
32.182793 20.012314 32.093719 20.000193 32.002998 20.000191 c
31.912277 20.000193 31.823206 20.012314 31.735783 20.036554 c
31.648359 20.060797 31.565765 20.096279 31.488001 20.143002 c
21.488001 26.143002 l
21.45097 26.16737 21.41597 26.19437 21.383001 26.224003 c
21.382999 26.224001 l
h
41 36.433998 m
33 41.233997 l
33 33.566002 l
41 28.766003 l
41 36.433998 l
h
40.056 27 m
32 31.834 l
28.944 30 l
37 25.166 l
40.056 27 l
h
32 22.166 m
35.056 24 l
27 28.834 l
23.944 27 l
32 22.166 l
h
23 28.766001 m
31 33.566002 l
31 41.233002 l
23 36.433002 l
23 28.766001 l
h
f
33 6 m
34.200001 7.6 l
35.799999 6.4 l
32.799999 2.4 l
32.775776 2.37056 32.750008 2.342542 32.722691 2.315948 c
32.695374 2.289353 32.666672 2.264342 32.636593 2.240916 c
32.606514 2.217489 32.575237 2.195789 32.542767 2.175815 c
32.510292 2.155841 32.476818 2.137715 32.442345 2.121437 c
32.407871 2.105158 32.372604 2.090827 32.336548 2.078442 c
32.300495 2.066056 32.263866 2.055693 32.226665 2.047352 c
32.189465 2.039011 32.151917 2.032742 32.114025 2.028546 c
32.076134 2.02435 32.038124 2.022252 32 2.022252 c
31.961874 2.022252 31.923864 2.02435 31.885971 2.028547 c
31.848078 2.032742 31.810532 2.039011 31.773331 2.047353 c
31.73613 2.055694 31.699501 2.066057 31.663445 2.078442 c
31.627386 2.090827 31.592121 2.105159 31.557646 2.121437 c
31.52317 2.137716 31.489695 2.155842 31.457222 2.175815 c
31.424749 2.195789 31.393476 2.217489 31.3634 2.240916 c
31.333323 2.264343 31.304625 2.289353 31.277309 2.315948 c
31.24999 2.342543 31.22422 2.37056 31.199999 2.4 c
28.199999 6.4 l
29.799999 7.599999 l
31 6 l
31 14 l
33 14 l
33 6 l
h
f
33 58 m
33 50 l
31 50 l
31 58 l
29.799999 56.400002 l
28.199999 57.600002 l
31.199999 61.600002 l
31.223207 61.630947 31.248129 61.660446 31.274761 61.688499 c
31.301392 61.716553 31.329556 61.742973 31.359251 61.767757 c
31.38895 61.792542 31.419981 61.815525 31.452345 61.836708 c
31.484711 61.857891 31.518192 61.877132 31.552788 61.894432 c
31.587383 61.911728 31.622864 61.926968 31.659231 61.940151 c
31.695595 61.953331 31.732601 61.964363 31.770247 61.973248 c
31.807892 61.982136 31.845924 61.988815 31.884344 61.99329 c
31.922764 61.997761 31.961315 61.999996 31.999996 62 c
32.038677 61.999996 32.077229 61.997761 32.11565 61.99329 c
32.154068 61.988815 32.192101 61.982136 32.229748 61.973248 c
32.267395 61.964363 32.304405 61.953331 32.340771 61.940151 c
32.377136 61.926968 32.412621 61.911728 32.447216 61.894432 c
32.481812 61.877132 32.515289 61.857891 32.547657 61.836708 c
32.580021 61.815525 32.61105 61.792542 32.640747 61.767757 c
32.670444 61.742973 32.698608 61.716553 32.725239 61.688499 c
32.751869 61.660446 32.776791 61.630947 32.799999 61.600002 c
35.799999 57.600002 l
34.200001 56.400002 l
33 58 l
h
f
31 16 2 2 re
f
31 46 2 2 re
f
14 33 m
14 31 l
6 31 l
7.6 29.799999 l
6.4 28.200001 l
2.4 31.200001 l
2.369056 31.223211 2.339557 31.248131 2.311505 31.274763 c
2.283452 31.301395 2.257033 31.329557 2.232249 31.359253 c
2.207465 31.388952 2.18448 31.419983 2.163297 31.452345 c
2.142113 31.484711 2.122872 31.51819 2.105574 31.552784 c
2.088275 31.587383 2.073036 31.622866 2.059854 31.659231 c
2.046673 31.695599 2.035639 31.732605 2.026752 31.77025 c
2.017865 31.807898 2.011185 31.845932 2.006712 31.884352 c
2.002238 31.922773 2.000001 31.961325 2.000001 32.000004 c
2.000001 32.038685 2.002238 32.077236 2.006712 32.115658 c
2.011185 32.154079 2.017865 32.192112 2.026752 32.229755 c
2.035639 32.267403 2.046673 32.304409 2.059854 32.340771 c
2.073036 32.377136 2.088275 32.412617 2.105573 32.447212 c
2.122872 32.481808 2.142113 32.515289 2.163297 32.547657 c
2.18448 32.580025 2.207464 32.611053 2.232248 32.640747 c
2.257033 32.670444 2.283452 32.698612 2.311505 32.725243 c
2.339557 32.751873 2.369056 32.776794 2.4 32.799999 c
6.4 35.799999 l
7.6 34.200001 l
6 33 l
14 33 l
h
f
57.599998 28.200001 m
56.399998 29.800001 l
58 31 l
50 31 l
50 33 l
58 33 l
56.400002 34.200001 l
57.600002 35.799999 l
61.600002 32.799999 l
61.630947 32.776791 61.660446 32.751869 61.688499 32.725239 c
61.716553 32.698608 61.742973 32.670444 61.767757 32.640747 c
61.792542 32.61105 61.815525 32.580021 61.836708 32.547657 c
61.857891 32.515289 61.877132 32.481812 61.894432 32.447216 c
61.911732 32.412621 61.926971 32.377136 61.940155 32.340771 c
61.953335 32.304405 61.964363 32.267399 61.973248 32.229752 c
61.98214 32.192108 61.988819 32.154076 61.993294 32.11565 c
61.997768 32.077232 62.000004 32.038681 62.000008 32 c
62.000004 31.961319 61.997768 31.922768 61.993298 31.884348 c
61.988823 31.845928 61.982143 31.807894 61.973255 31.770248 c
61.964367 31.732603 61.953331 31.695599 61.940151 31.659233 c
61.926971 31.622868 61.911732 31.587385 61.894432 31.552788 c
61.877132 31.518192 61.857891 31.484711 61.836708 31.452345 c
61.815525 31.419979 61.792542 31.388948 61.767757 31.359249 c
61.742973 31.329554 61.716553 31.301392 61.688499 31.274759 c
61.660446 31.248127 61.630947 31.223207 61.600002 31.199999 c
57.599998 28.200001 l
h
f
16 31 2 2 re
f
46 31 2 2 re
f
19.979 18.565001 m
14.323 12.909 l
16.302 13.191 l
16.584999 11.211 l
11.636 10.5 l
11.597512 10.494287 11.558822 10.49083 11.51993 10.489633 c
11.481039 10.488436 11.44221 10.489504 11.403444 10.492839 c
11.364678 10.496175 11.326238 10.501754 11.288123 10.509576 c
11.250008 10.517398 11.212476 10.527411 11.17553 10.539614 c
11.138583 10.551817 11.102472 10.566128 11.067196 10.582545 c
11.03192 10.598964 10.99772 10.617378 10.964594 10.637789 c
10.931467 10.658199 10.89964 10.680468 10.869113 10.704594 c
10.838586 10.728719 10.809566 10.754539 10.782053 10.782053 c
10.754539 10.809566 10.728719 10.838586 10.704594 10.869113 c
10.680468 10.89964 10.658199 10.931467 10.637789 10.964594 c
10.617378 10.99772 10.598964 11.03192 10.582545 11.067196 c
10.566128 11.102472 10.551817 11.138583 10.539614 11.17553 c
10.527411 11.212476 10.517398 11.250008 10.509575 11.288123 c
10.501754 11.326238 10.496175 11.364678 10.492839 11.403445 c
10.489504 11.442211 10.488436 11.48104 10.489633 11.519932 c
10.49083 11.558823 10.494287 11.597512 10.5 11.636 c
11.207 16.584999 l
13.187 16.301998 l
12.905001 14.322998 l
18.561001 19.978998 l
19.979 18.565001 l
h
f
50.808998 47.700001 m
51.091 49.679001 l
45.434998 44.023003 l
44.020996 45.437004 l
49.676994 51.093002 l
47.700001 50.808998 l
47.417 52.788998 l
52.366001 53.495998 l
52.41309 53.502785 52.460423 53.506115 52.507996 53.505993 c
52.543728 53.505997 52.579357 53.504093 52.614883 53.500275 c
52.65041 53.496464 52.685631 53.490765 52.720547 53.483177 c
52.755463 53.475586 52.789871 53.466152 52.823772 53.454872 c
52.857677 53.443596 52.890881 53.430538 52.923386 53.415703 c
52.955891 53.400867 52.987511 53.384335 53.018238 53.366108 c
53.048973 53.347881 53.078644 53.328064 53.10725 53.30666 c
53.135857 53.285255 53.163239 53.262379 53.189396 53.238037 c
53.215549 53.213696 53.24033 53.188026 53.263733 53.16103 c
53.287136 53.134033 53.309032 53.105862 53.329418 53.076515 c
53.349804 53.047169 53.368565 53.016819 53.385696 52.985466 c
53.402828 52.954109 53.418236 52.921928 53.431919 52.88892 c
53.445599 52.855911 53.457478 52.822269 53.467552 52.787991 c
53.477627 52.753712 53.485844 52.71899 53.492199 52.68383 c
53.49855 52.64867 53.50301 52.613274 53.505569 52.577633 c
53.508129 52.541992 53.508774 52.506321 53.507511 52.470612 c
53.506245 52.434902 53.503075 52.399364 53.498001 52.363998 c
52.791 47.414997 l
50.808998 47.700001 l
h
f
Q
q
[37.064075 -37.078495 37.064075 37.078495 -318.93478 1717.1406] cm
/DeviceRGB {} CS
[0.0667 0.5647 0.7961] SC
/DeviceRGB {} cs
[0.0667 0.5647 0.7961] sc
20.393999 20.393999 2 2 re
f
Q
q
[37.064075 -37.078495 37.064075 37.078495 -779.46637 2829.4324] cm
/DeviceRGB {} CS
[0.0667 0.5647 0.7961] SC
/DeviceRGB {} cs
[0.0667 0.5647 0.7961] sc
41.606998 41.606998 2 2 re
f
Q
q
[52.416523 0 0 52.436913 145.580368 595.30524] cm
/DeviceRGB {} CS
[0.0667 0.5647 0.7961] SC
/DeviceRGB {} cs
[0.0667 0.5647 0.7961] sc
18.565001 44.021 m
12.909 49.677002 l
13.191 47.698002 l
11.211 47.415001 l
10.5 52.363998 l
10.494923 52.399361 10.49175 52.434895 10.490481 52.4706 c
10.489212 52.506302 10.489856 52.541969 10.492411 52.577602 c
10.494966 52.613239 10.499418 52.648636 10.505769 52.683792 c
10.512118 52.718952 10.520329 52.75367 10.530401 52.787945 c
10.540473 52.822224 10.552347 52.855865 10.566026 52.888866 c
10.579703 52.921867 10.595106 52.954048 10.612234 52.985401 c
10.629362 53.016758 10.648117 53.047108 10.668498 53.076454 c
10.68888 53.105801 10.710772 53.133972 10.734174 53.160969 c
10.757575 53.187965 10.782351 53.213631 10.808504 53.237972 c
10.834658 53.262314 10.862037 53.285191 10.890642 53.306599 c
10.919248 53.328007 10.948914 53.347828 10.979645 53.366058 c
11.010375 53.384281 11.041991 53.400814 11.074493 53.415657 c
11.106996 53.430496 11.140197 53.443558 11.174099 53.454842 c
11.208001 53.466122 11.24241 53.475555 11.277323 53.483147 c
11.312237 53.490742 11.347457 53.496445 11.382983 53.500263 c
11.418509 53.504086 11.454137 53.505997 11.489867 53.505997 c
11.537487 53.506123 11.584865 53.502789 11.632 53.495995 c
16.580999 52.788998 l
16.298 50.808998 l
14.319 51.091 l
19.975 45.434998 l
18.565001 44.021 l
h
f
52.789001 16.584999 m
53.496002 11.636 l
53.507008 11.559114 53.509026 11.481992 53.502064 11.404635 c
53.495094 11.327278 53.479332 11.251759 53.454769 11.178076 c
53.430206 11.104392 53.397507 11.034519 53.356663 10.968455 c
53.315823 10.902391 53.267933 10.841908 53.212997 10.787002 c
53.158321 10.731739 53.097977 10.683584 53.031956 10.642538 c
52.965935 10.601491 52.896053 10.568676 52.822304 10.544093 c
52.748554 10.51951 52.672955 10.503831 52.595509 10.497055 c
52.518066 10.490281 52.440895 10.492596 52.363998 10.503999 c
47.415001 11.211 l
47.698002 13.191 l
49.677002 12.909 l
44.021004 18.565001 l
45.435005 19.979 l
51.091003 14.323 l
50.808998 16.299999 l
52.789001 16.584999 l
h
f
Q
q
[37.064075 -37.078495 37.064075 37.078495 -1105.13025 2042.9312] cm
/DeviceRGB {} CS
[0.0667 0.5647 0.7961] SC
/DeviceRGB {} cs
[0.0667 0.5647 0.7961] sc
20.393999 41.606998 2 2 re
f
Q
q
[37.064075 -37.078495 37.064075 37.078495 6.781431 2503.6418] cm
/DeviceRGB {} CS
[0.0667 0.5647 0.7961] SC
/DeviceRGB {} cs
[0.0667 0.5647 0.7961] sc
41.606998 20.393999 2 2 re
f
Q
q
[186.78268 0 0 186.85535 3666.2183 -89.312531] cm
/DeviceRGB {} CS
[0.4902 0.8 1] SC
/DeviceRGB {} cs
[0.4902 0.8 1] sc
3.74 5.84 m
3.74 11.96 l
3.9 11.96 l
10.16 5.84 l
12.84 5.84 l
6 12.38 l
13.3 20 l
10.5 20 l
3.9 12.92 l
3.74 12.92 l
3.74 20 l
1.82 20 l
1.82 5.84 l
3.74 5.84 l
h
18.120001 10.28 m
19.320002 10.28 20.27 10.55328 20.970001 11.099939 c
21.670002 11.646599 22.040001 12.406639 22.080002 13.379939 c
22.080002 18.459938 l
22.080002 18.939938 22.106663 19.453278 22.160002 19.999939 c
20.560001 19.999939 l
20.52 19.573278 20.500002 19.093279 20.500002 18.559938 c
20.460001 18.559938 l
20.046661 19.173279 19.570002 19.606638 19.030001 19.859938 c
18.49 20.113237 17.860001 20.239937 17.140001 20.239937 c
16.16666 20.239937 15.376701 19.979937 14.770001 19.459936 c
14.163302 18.939936 13.860002 18.253237 13.860002 17.399937 c
13.860002 16.319937 14.313341 15.503237 15.220001 14.949937 c
16.126661 14.396637 17.406601 14.119937 19.060001 14.119937 c
20.400002 14.119937 l
20.400002 13.779937 l
20.400002 13.139936 20.190002 12.636637 19.770002 12.269937 c
19.350002 11.903236 18.800003 11.719936 18.120003 11.719936 c
17.613342 11.719936 17.170002 11.796597 16.790003 11.949936 c
16.410004 12.103275 15.960003 12.386616 15.440002 12.799956 c
14.360003 11.679956 l
15.386703 10.773296 16.640003 10.306657 18.120003 10.279957 c
18.120001 10.28 l
h
15.66 17.26 m
15.66 18.286701 16.340019 18.799999 17.700001 18.799999 c
18.51334 18.799999 19.163301 18.55666 19.650002 18.07 c
20.136702 17.58334 20.386662 16.879999 20.400002 15.96 c
20.400002 15.440001 l
19.380001 15.440001 l
18.206701 15.440001 17.293402 15.59 16.640001 15.89 c
15.986601 16.190001 15.660002 16.64666 15.660002 17.26 c
15.66 17.26 l
h
31.620001 10.520001 m
31.620001 12.120001 l
26.200001 18.440001 l
31.900002 18.440001 l
31.900002 20 l
24.040001 20 l
24.040001 18.379999 l
29.420002 12.079999 l
24.220001 12.079999 l
24.220001 10.519999 l
31.620001 10.519999 l
31.620001 10.520001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
